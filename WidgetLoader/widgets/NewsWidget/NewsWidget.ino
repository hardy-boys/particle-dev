#include "./NewsWidget.h"

// Icons
const unsigned char news_icon[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 
	0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 
	0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//
// ───  SETUP AND LOOP ─────────────────────────────────────────────────────────────
//

void NewsWidget::widget_setup()
{
	Serial.println("News widget loaded");

	// Event listeners
	Particle.subscribe("news", [this](const char *a, const char *b) { streamDataHandler(a, b); });
}

void NewsWidget::widget_loop()
{
	tft.setTextSize(1);
	tft.setFont(ARIAL_8);
	tft.setTextColor(ILI9341_BLACK, ILI9341_WHITE);

	// News feeds
	tft.setCursor(HEADLINE_START_H, HEADLINE_START_V);
	tft.println(headline_1);
	tft.setCursor(HEADLINE_START_H, HEADLINE_START_V + (20*1));
	tft.println(headline_2);
	tft.setCursor(HEADLINE_START_H, HEADLINE_START_V + (20*2));
	tft.println(headline_3);
	tft.setCursor(HEADLINE_START_H, HEADLINE_START_V + (20*3));
	tft.println(headline_4);
	tft.setCursor(HEADLINE_START_H, HEADLINE_START_V + (20*4));
	tft.println(headline_5);
	tft.setCursor(HEADLINE_START_H, HEADLINE_START_V + (20*5));
	tft.println(headline_6);
	tft.setCursor(HEADLINE_START_H, HEADLINE_START_V + (20*6));
	tft.println(headline_7);
	tft.setCursor(HEADLINE_START_H, HEADLINE_START_V + (20*7));
	tft.println(headline_8);

}

//
// ─── UTIL FUNCTIONS ─────────────────────────────────────────────────────────────
//

void NewsWidget::streamDataHandler(const char *event, const char *data)
{
	// Allocate buffer for handling JSON, automatically destoyed after this handler finishes
	StaticJsonBuffer<1024> jsonBuffer;

	Serial.print("Recieved event: ");
	Serial.println(event);
	if (data)
	{
		int length = strlen(data) + 1;
		char dataCopy[length];
		strcpy(dataCopy, data);
		Serial.print("Recieved data: ");
		Serial.println(dataCopy);
		JsonObject& root = jsonBuffer.parseObject(dataCopy);
		if (!root.success())
		{
			Particle.publish("parseArray() failed");
			Serial.println("parseArray() failed");
			return;
		}

		// Update JSON data into our display variables
		JsonArray& articles = root["articles"];
		headline_1 = articles[0].asString();
		headline_2 = articles[1].asString();
		headline_3 = articles[2].asString();
		headline_4 = articles[3].asString();
		headline_5 = articles[4].asString();
		headline_6 = articles[5].asString();
		headline_7 = articles[6].asString();
		headline_8 = articles[7].asString();

		Serial.println("News status updated");
	}
	else
	{
		Serial.println("NULL");
	}
	digitalWrite(blinkLed, HIGH);
	delay(500);
	digitalWrite(blinkLed, LOW);
}

void NewsWidget::screenInit()
{
	Serial.println("Rendering NewsWidget");

	// Sync time with particle cloud
	Particle.syncTime();
	waitUntil(Particle.syncTimeDone);

	/***** Initial screen setup *****/
	tft.begin();
	tft.setRotation(1);
	tft.fillScreen(ILI9341_WHITE);
	tft.drawFastHLine(0, 50, 320, ILI9341_BLACK);
	tft.drawFastVLine(60, 0, 50, ILI9341_BLACK);

	tft.setCursor(144, 12);
	tft.setTextColor(ILI9341_BLACK);
	tft.setTextWrap(false);
	tft.setTextSize(1);
	tft.setFont(CALIBRI_24);

	tft.println("     News     ");
	tft.drawBitmap(6, 0, news_icon, 48, 48, ILI9341_RED);
}